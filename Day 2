React Components:

1.) What is the difference between a regular function and an arrow function?

Regular function: ---> created using function declarations or expressions , which are constructable and callable.
1. Regular functions created using function declarations or expressions are ‘constructible’ and ‘callable’. Since regular functions are constructible, they can be called using the ‘new’ keyword.

EX: 
let x = function(){
console.log(arguments);
}
var y = new x(1,2,3)

output: Arguments { 0: 1, 1: 2, 2:3,......}

        -----------------------------------------------

2. Arguments objects are available in arrow functions

EX:
<script>
	let user = {
		show(){
			console.log(arguments);
		}
	};
	user.show(1, 2, 3);
</script>                           //arguments are defined here.

output: Arguments(3) [1,2,3]

3. regular functions do have their own this. 

EX: 
<script>
	let user = {
		name: "GFG",
		gfg1:() => {
			console.log("hello " + this.name); // no 'this' binding here
		},
		gfg2(){
			console.log("Welcome to " + this.name); // 'this' binding works here
		}
	};
	user.gfg1();
	user.gfg2();
</script>

output: hello
        Welcome to GFG

                       ----------------------------------------------------------------------------------------------------------------------------------------------------

Arrow function: ---> fat arrow . a new feature introduced in ES6, a more precise consise syntax writing function expression.
1. the arrow functions are only ‘callable’ and not constructible. Thus, we will get a run-time error on trying to construct a non-constructible arrow function using the new keyword.

EX: let x = ()=>{
console.log(arguments);
}
new x(1,2,3);

output: TypeError: x is not a constructor

          ------------------------------------------------
   
2. Arguments objects are not available in arrow functions

EX: 
 let user = {   
            show_ar : () => {
            console.log(...arguments);
        }
    };
    user.show_ar(1, 2, 3);   

output:    Referece Error: arguments is not defined. 

       ------------------------------------------------------

3.arrow functions do not have their own this.  

EX:<script>
	let user = {
		name: "GFG",
		gfg1:() => {
			console.log("hello " + this.name); // no 'this' binding here
		},
		gfg2(){
			console.log("Welcome to " + this.name); // 'this' binding works here
		}
	};
	user.gfg1();
	user.gfg2();
</script>

output: hello
        Welcome to GFG

===================================================================================================================================================================================================================

2.) What is a React Component?

it is a resuable chunk of code. basically a javascript function, which works in insollation and renders a jsx
classified into two:  functional Component
                      class Component

===================================================================================================================================================================================================================

3.) How do you make a React functional component?

by writing a js function. In this functional components the return value is JSX code to render to the DOM tree.

ex: //index.js File
import React from 'react';
import ReactDOM from 'react-dom';
import Demo from './App';

ReactDOM.render(
	<React.StrictMode>
		<Demo />
	</React.StrictMode>,
	document.getElementById('root')
);

===================================================================================================================================================================================================================

4.) What is the difference between a pure JavaScript function and a functional component?

[i.] A pure component is a class-based component that implements shouldComponentUpdate() with a shallow comparison of the props and state. This means that the component will only re-render if its props or state
have changed. This can improve performance by avoiding unnecessary re-renders
It only compares shallow props and state and you cannot implement your own shouldComponentUpdate in it.

[ii.] functional components accepts propa and state and these props and states changes / re-renders, if the parent components changes/re-renders.
 stateless functional component is a function that takes props as an argument and returns a React element. It does not have a state object or lifecycle methods, so it is simpler than a class-based component. 
However, it cannot handle state or complex behavior, so it is best suited for presentational components that only need to render based on props.

===================================================================================================================================================================================================================

5.) How small is a React component?

if a React component has more than 200 lines of code, then it is too big. Big components are difficult to read, difficult to maintain and nearly impossible to unit test.
your UI gets split into small, digestible, reusable chunks. Each component is usually compact (100–200 lines), a size which is easy for other developers to understand and modify.
 In react component, we can return only one element.

...................................................................................................................................................................................................................



PROPS -------> data carrier from parent to child components.

ex1:
function User(props){
 return (
   <div>
     <h1>{props.fN}</h1>
     <h1>{props.city}</h1>
   </div>
 )
}

<User 
  fN = 'anu'
  lN = 'n'
  city = 'coimbatore'
/>

ex2: string props type
import React from 'react'
import ReactDOM from 'react-dom'

const Header = (props) =>{
    return (
     <header>
      <h1>{props.welcome}</h1>
     </header>
    )
}

const App = () =>{
    return (
       <div>
            <Header welcome= '20 days of react'/>
       </div>
    )
}

the value of the props are written statically. 
To write something dynamically, we can take the help of variables.

ex3: string number props type

import React from 'react'
import ReactDOM from 'react-dom'

const Header = (props)=>{
   return (
<header>
    <div>
      <h1>your name is ${props.n}</h1>
      <h1>your age is ${props.presentAge}</h1>
    </div>
</header>
   )
}

const App = ()=>{

  let name = 'anu';
  let birthYear = 2003;
  let currentYear = 2023;
  let age = currentYear - birthYear;
  
   return (
     <div>
         <Header 
             n = {name}
             presentAge = {age}
         />
     </div>
   )
}

ex4 : boolean props

import React from 'react'
import ReactDOM from 'react-dom'

const Header = (props)=>{
   return (
<header>
    <div>
      let votingAge = props.eligibletoVote ? "can vote" : "shouldn't vote"
      <p>{votingAge}</p>
    </div>
</header>
   )
}

const App = ()=>{

  let name = 'anu';
  let birthYear = 2003;
  let currentYear = 2023;
  let age = currentYear - birthYear;
  let vote = age>=18;

   return (
     <div>
         <Header 
           eligibletoVote = {vote}
         />
     </div>
   )
}

reactDOM.render(</App>,document.getElementById('root'));

ex5: Array props type

import React from 'react'
import ReactDOM from 'react-dom'

const Header = (props)=>{
     return (
       <Header>
       <div>
            const skillLists = props.skills.map( (order)=>{
                return (
                  <ul>
                     <li>{order}</li>
                  </ul>
		)
	    })
            <p>{skillLists}</p>
       </div>
       </Header>
     )
}

const App = ()=>{
  return (
    <div>
        <Header 
          skills = {
            ['html' , 'css' , 'JS']
	  }
        />
    </div>
  )
}

const rootElement = document.getElementById('root')
ReactDOM.render(<App />, rootElement)

ex6: object props type

import React from 'react'
import ReactDOM from 'react-dom'

// Header Component
const Header = (props) => {
  return (
    <header>
      <div className='header-wrapper'>
        <h1>{props.data.welcome}</h1>
        <h2>{props.data.title}</h2>
        <h3>{props.data.subtitle}</h3>
      </div>
    </header>
  )
}

// The App, or the parent or the container component
// Functional Component
const App = () => {
  const data = {
    welcome: 'Welcome to 30 Days Of React',
    title: 'Getting Started React',
    subtitle: 'JavaScript Library',
  }

  return (
    <div className='app'>
      <Header data={data} />
    </div>
  )
}
const rootElement = document.getElementById('root')
// we render the JSX element using the ReactDOM package
ReactDOM.render(<App />, rootElement)

....
import React from 'react'
import ReactDOM from 'react-dom'

const Header = () => {
  return (
    <header>
      <div>
        
      </div>
    </header>
  )
}

const App = () => {
  return (
    <div>
      <Header  />
    </div>
  )
}

const rootElement = document.getElementById('root')
ReactDOM.render(<App />, rootElement)
...

................................................................................................

import React from 'react'
import ReactDOM from 'react-dom'

const showDate = (time)=>{
   const months = [ 'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'];

   const month = months[time.getMonth()].slice(0,3);
   const year = time.getFullYear();
   const date = time.getDate()

   return `${month} ${date} ${year}`
}

const Header = (props) => {
  return (
    <header>
      <div>
        <h1>{props.fulldata.welcome}</h1>
        <h1>{props.fulldata.learner.fN}</h1>
        <p>{showDate(props.fulldate.date)}</p>
      </div>
    </header>
  )
}

const App = () => {

const data = {
    welcome : "20 day react learning",
    learner : {
        fN : 'anu',
        lN : 'N'
    },
    date: new Date(),
}
  return (
    <div>
      <Header fulldata={data} />
    </div>
  )
}

const rootElement = document.getElementById('root')
ReactDOM.render(<App />, rootElement)

...............................................................................................................................................................

ques: 
1.] What is a propTypes and props?

Props -----> an object passed to the component instance
PropTypes ----> an object were we declare the types of the data which comes under the props.

2.] what is a default props?

The defaultProps is a React component property that allows you to set default values for the props argument. If the prop property is passed, it will be changed. 
The defaultProps can be defined as a property on the component class itself, to set the default props for the class.

===================================================================================================================================================================================================================
MAPPING ARRAYS

Mapping Array of Numbers:

function App() {

  const num = [1,2,3,4,5];
  return (
    <div className="App">
      {num.map( order=>{
        return (
          <p>{order}</p>
        )
      })}
    </div>
  );
}

export default App;
...............................

Mapping Array of Arrays:

function App() {

  const skills = [ ['html',6],
  ['css',5],
  ['js',7],
  ['react',8]
];

  return (
    <div className="App">
      {skills.map( (order)=>{
        return (
          <p>{order.map( order=>{
            return (
            <p>{order}</p>
              )
          })}</p>
        )   
      })}
    </div>
  );
}

export default App;
................................
